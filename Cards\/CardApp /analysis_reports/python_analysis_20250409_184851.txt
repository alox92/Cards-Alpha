[95m[1mANALYSEUR SWIFT[0m
[95m[1m===============[0m

Analyse du projet: .

[94mChargement des fichiers Swift...[0m
[92mTrouv√© 91 fichiers Swift √† analyser.[0m
[94mAnalyse des fichiers Swift...[0m
[94mRecherche des d√©pendances circulaires...[0m
[92mAnalyse termin√©e. 321 probl√®mes trouv√©s.[0m

[95m[1mRAPPORT D'ANALYSE SWIFT[0m
[1m========================[0m

[1mR√©sum√© des probl√®mes:[0m
  Critiques: [91m0[0m
  Erreurs:   [91m11[0m
  Avertissements: [93m183[0m
  Infos:     [94m127[0m
  TOTAL:     [1m321[0m

[1m[4mProbl√®mes de concurrence (11):[0m

[91m[ERROR][0m StudyService.swift:216
  Utilisation de 'self' sans [weak self] dans un bloc asynchrone
  [92mSuggestion: Utilisez [weak self] pour √©viter un cycle de r√©f√©rence[0m
  Exemple de correction:
  [96mTask { [weak self] in
    guard let self = self else { return }
    // votre code asynchrone
}[0m

[91m[ERROR][0m UnifiedDeckService.swift:119
  Utilisation de 'self' sans [weak self] dans un bloc asynchrone
  [92mSuggestion: Utilisez [weak self] pour √©viter un cycle de r√©f√©rence[0m
  Exemple de correction:
  [96mTask { [weak self] in
    guard let self = self else { return }
    // votre code asynchrone
}[0m

[91m[ERROR][0m UnifiedDeckService.swift:151
  Utilisation de 'self' sans [weak self] dans un bloc asynchrone
  [92mSuggestion: Utilisez [weak self] pour √©viter un cycle de r√©f√©rence[0m
  Exemple de correction:
  [96mTask { [weak self] in
    guard let self = self else { return }
    // votre code asynchrone
}[0m

[91m[ERROR][0m UnifiedDeckService.swift:253
  Utilisation de 'self' sans [weak self] dans un bloc asynchrone
  [92mSuggestion: Utilisez [weak self] pour √©viter un cycle de r√©f√©rence[0m
  Exemple de correction:
  [96mTask { [weak self] in
    guard let self = self else { return }
    // votre code asynchrone
}[0m

[91m[ERROR][0m UnifiedDeckService.swift:269
  Utilisation de 'self' sans [weak self] dans un bloc asynchrone
  [92mSuggestion: Utilisez [weak self] pour √©viter un cycle de r√©f√©rence[0m
  Exemple de correction:
  [96mTask { [weak self] in
    guard let self = self else { return }
    // votre code asynchrone
}[0m

[91m[ERROR][0m UnifiedDeckService.swift:466
  Utilisation de 'self' sans [weak self] dans un bloc asynchrone
  [92mSuggestion: Utilisez [weak self] pour √©viter un cycle de r√©f√©rence[0m
  Exemple de correction:
  [96mTask { [weak self] in
    guard let self = self else { return }
    // votre code asynchrone
}[0m

[91m[ERROR][0m UnifiedDeckService.swift:507
  Utilisation de 'self' sans [weak self] dans un bloc asynchrone
  [92mSuggestion: Utilisez [weak self] pour √©viter un cycle de r√©f√©rence[0m
  Exemple de correction:
  [96mTask { [weak self] in
    guard let self = self else { return }
    // votre code asynchrone
}[0m

[91m[ERROR][0m UnifiedDeckService.swift:571
  Utilisation de 'self' sans [weak self] dans un bloc asynchrone
  [92mSuggestion: Utilisez [weak self] pour √©viter un cycle de r√©f√©rence[0m
  Exemple de correction:
  [96mTask { [weak self] in
    guard let self = self else { return }
    // votre code asynchrone
}[0m

[91m[ERROR][0m UnifiedDeckService.swift:622
  Utilisation de 'self' sans [weak self] dans un bloc asynchrone
  [92mSuggestion: Utilisez [weak self] pour √©viter un cycle de r√©f√©rence[0m
  Exemple de correction:
  [96mTask { [weak self] in
    guard let self = self else { return }
    // votre code asynchrone
}[0m

[91m[ERROR][0m UnifiedDeckService.swift:657
  Utilisation de 'self' sans [weak self] dans un bloc asynchrone
  [92mSuggestion: Utilisez [weak self] pour √©viter un cycle de r√©f√©rence[0m
  Exemple de correction:
  [96mTask { [weak self] in
    guard let self = self else { return }
    // votre code asynchrone
}[0m

... et 1 autres probl√®mes de cette cat√©gorie.


[1m[4mProbl√®mes CoreData (288):[0m

[93m[WARNING][0m CoreDataOptimizer.swift:205
  Op√©ration CoreData 'fetch' sans gestion d'erreur compl√®te
  [92mSuggestion: Enveloppez l'op√©ration dans un bloc do-catch pour g√©rer les erreurs[0m
  Exemple de correction:
  [96mdo {
    try context.fetch(...)
} catch {
    print("Erreur: \(error)")
}[0m

[93m[WARNING][0m CoreDataOptimizer.swift:192
  Acc√®s √† viewContext sans annotation @MainActor
  [92mSuggestion: Ajoutez @MainActor √† la classe ou m√©thode qui utilise viewContext[0m
  Exemple de correction:
  [96m@MainActor
func maFonction() {
    // acc√®s √† viewContext
}[0m

[93m[WARNING][0m CoreDataOptimizer.swift:86
  Op√©ration CoreData 'save' sans gestion d'erreur compl√®te
  [92mSuggestion: Enveloppez l'op√©ration dans un bloc do-catch pour g√©rer les erreurs[0m
  Exemple de correction:
  [96mdo {
    try context.save(...)
} catch {
    print("Erreur: \(error)")
}[0m

[93m[WARNING][0m CoreDataOptimizer.swift:160
  Op√©ration CoreData 'fetch' sans gestion d'erreur compl√®te
  [92mSuggestion: Enveloppez l'op√©ration dans un bloc do-catch pour g√©rer les erreurs[0m
  Exemple de correction:
  [96mdo {
    try context.fetch(...)
} catch {
    print("Erreur: \(error)")
}[0m

[93m[WARNING][0m CoreDataOptimizer.swift:178
  Op√©ration CoreData 'fetch' sans gestion d'erreur compl√®te
  [92mSuggestion: Enveloppez l'op√©ration dans un bloc do-catch pour g√©rer les erreurs[0m
  Exemple de correction:
  [96mdo {
    try context.fetch(...)
} catch {
    print("Erreur: \(error)")
}[0m

[93m[WARNING][0m CoreDataOptimizer.swift:193
  Op√©ration CoreData 'fetch' sans gestion d'erreur compl√®te
  [92mSuggestion: Enveloppez l'op√©ration dans un bloc do-catch pour g√©rer les erreurs[0m
  Exemple de correction:
  [96mdo {
    try context.fetch(...)
} catch {
    print("Erreur: \(error)")
}[0m

[93m[WARNING][0m CoreDataOptimizer.swift:216
  Op√©ration CoreData 'fetch' sans gestion d'erreur compl√®te
  [92mSuggestion: Enveloppez l'op√©ration dans un bloc do-catch pour g√©rer les erreurs[0m
  Exemple de correction:
  [96mdo {
    try context.fetch(...)
} catch {
    print("Erreur: \(error)")
}[0m

[93m[WARNING][0m CoreDataOptimizer.swift:243
  Op√©ration CoreData 'fetch' sans gestion d'erreur compl√®te
  [92mSuggestion: Enveloppez l'op√©ration dans un bloc do-catch pour g√©rer les erreurs[0m
  Exemple de correction:
  [96mdo {
    try context.fetch(...)
} catch {
    print("Erreur: \(error)")
}[0m

[93m[WARNING][0m CoreDataOptimizer.swift:255
  Op√©ration CoreData 'fetch' sans gestion d'erreur compl√®te
  [92mSuggestion: Enveloppez l'op√©ration dans un bloc do-catch pour g√©rer les erreurs[0m
  Exemple de correction:
  [96mdo {
    try context.fetch(...)
} catch {
    print("Erreur: \(error)")
}[0m

[93m[WARNING][0m CoreDataOptimizer.swift:159
  NSPredicate potentiellement vuln√©rable aux injections
  [92mSuggestion: Utilisez les placeholders %@ pour les valeurs dynamiques[0m
  Exemple de correction:
  [96mNSPredicate(format: "attribute = %@", value)[0m

... et 278 autres probl√®mes de cette cat√©gorie.


[1m[4mProbl√®mes de s√©curit√© (22):[0m

[94m[INFO][0m run_core_data_optimizer.swift:120
  Utilisation de force unwrap (!), peut causer des crashes
  [92mSuggestion: Utilisez 'if let', 'guard let' ou '??' pour un d√©ballage s√©curis√©[0m
  Exemple de correction:
  [96mif let value = optionalValue {
    // Utiliser value
} else {
    // G√©rer le cas nil
}[0m

[94m[INFO][0m run_core_data_optimizer.swift:142
  Utilisation de force unwrap (!), peut causer des crashes
  [92mSuggestion: Utilisez 'if let', 'guard let' ou '??' pour un d√©ballage s√©curis√©[0m
  Exemple de correction:
  [96mif let value = optionalValue {
    // Utiliser value
} else {
    // G√©rer le cas nil
}[0m

[94m[INFO][0m run_core_data_optimizer.swift:150
  Utilisation de force unwrap (!), peut causer des crashes
  [92mSuggestion: Utilisez 'if let', 'guard let' ou '??' pour un d√©ballage s√©curis√©[0m
  Exemple de correction:
  [96mif let value = optionalValue {
    // Utiliser value
} else {
    // G√©rer le cas nil
}[0m

[94m[INFO][0m CoreDataOptimizer.swift:160
  Utilisation de force unwrap (!), peut causer des crashes
  [92mSuggestion: Utilisez 'if let', 'guard let' ou '??' pour un d√©ballage s√©curis√©[0m
  Exemple de correction:
  [96mif let value = optionalValue {
    // Utiliser value
} else {
    // G√©rer le cas nil
}[0m

[94m[INFO][0m CoreDataOptimizer.swift:178
  Utilisation de force unwrap (!), peut causer des crashes
  [92mSuggestion: Utilisez 'if let', 'guard let' ou '??' pour un d√©ballage s√©curis√©[0m
  Exemple de correction:
  [96mif let value = optionalValue {
    // Utiliser value
} else {
    // G√©rer le cas nil
}[0m

[94m[INFO][0m CoreDataOptimizer.swift:193
  Utilisation de force unwrap (!), peut causer des crashes
  [92mSuggestion: Utilisez 'if let', 'guard let' ou '??' pour un d√©ballage s√©curis√©[0m
  Exemple de correction:
  [96mif let value = optionalValue {
    // Utiliser value
} else {
    // G√©rer le cas nil
}[0m

[94m[INFO][0m CoreDataOptimizer.swift:243
  Utilisation de force unwrap (!), peut causer des crashes
  [92mSuggestion: Utilisez 'if let', 'guard let' ou '??' pour un d√©ballage s√©curis√©[0m
  Exemple de correction:
  [96mif let value = optionalValue {
    // Utiliser value
} else {
    // G√©rer le cas nil
}[0m

[94m[INFO][0m CoreDataOptimizer.swift:255
  Utilisation de force unwrap (!), peut causer des crashes
  [92mSuggestion: Utilisez 'if let', 'guard let' ou '??' pour un d√©ballage s√©curis√©[0m
  Exemple de correction:
  [96mif let value = optionalValue {
    // Utiliser value
} else {
    // G√©rer le cas nil
}[0m

[94m[INFO][0m DependencyContainer.swift:83
  Utilisation de force unwrap (!), peut causer des crashes
  [92mSuggestion: Utilisez 'if let', 'guard let' ou '??' pour un d√©ballage s√©curis√©[0m
  Exemple de correction:
  [96mif let value = optionalValue {
    // Utiliser value
} else {
    // G√©rer le cas nil
}[0m

[94m[INFO][0m DependencyContainer.swift:96
  Utilisation de force unwrap (!), peut causer des crashes
  [92mSuggestion: Utilisez 'if let', 'guard let' ou '??' pour un d√©ballage s√©curis√©[0m
  Exemple de correction:
  [96mif let value = optionalValue {
    // Utiliser value
} else {
    // G√©rer le cas nil
}[0m

... et 12 autres probl√®mes de cette cat√©gorie.


[1m[4mRecommandations g√©n√©rales:[0m

1. Revoyez l'utilisation des capture lists ([weak self]) dans les closures
2. Ajoutez une gestion d'erreur compl√®te pour les op√©rations CoreData
3. Assurez-vous que toutes les op√©rations viewContext sont annot√©es avec @MainActor
4. √âvitez les d√©pendances circulaires entre les modules
5. Utilisez fetchBatchSize pour optimiser les performances des requ√™tes CoreData

[1mScore de sant√© du code: [93m76/100[0m

[1mFin du rapport.[0m

